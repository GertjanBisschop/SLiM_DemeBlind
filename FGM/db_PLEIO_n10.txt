//latest version -- all loci are one bp
// w = omega = strength selection pressure , 2.5 strong, 4 weak
// sm = sigma normal distribution effect sizes 0.05
// popsize 1000 per deme
// number of loci 100
// migrationrate 0.1

initialize() {
	defineConstant("optimum1", 2);
	defineConstant("optimum2", -2);
	defineConstant('glob_opt', sample(c(-2,2), 9, replace=T));
	//standard deviation normal distribution
	//defineConstant("sigma", 4.0);
	//defineConstant("sigma_m", 0.05);
	defineConstant("simID", getSeed());
	defineConstant("burnin", 10000);
	defineConstant("generations", 210000);
	//defineConstant("n_loci", 100);
	//defineConstant("migration", 0.001);
	//defineConstant("mutation_rate", 1e-4);
	
	//sample n_loci random positions 
	positions = seqLen(100)*20000+10000;
	//code for sampling n_loci randomly
	//positions = sort(sample(10000:2000000, n_loci));
	defineConstant("POS", positions);
	//adapt so enough neutral sequence at ends
	ends = c(positions[n_loci-1], 2000000);
	rates = c(mutation_rate, 0);
	
	
	//mutation rate defined for all n_loci sites, add neutral section after last mutation site 
	initializeMutationRate(rates, ends);

	// m1 mutation -- codes for QTL effect size zero upon initialization
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	//make sure slim includes fixed mutations to calculate fitness
	m1.convertToSubstitution = F;
	
	//multiple mutations on one locus, stack effect sizes s, only remember last l
	m1.mutationStackPolicy = "s";
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	for (element in positions)
		initializeGenomicElement(g1, element, element);
	
	//initialize recombinationrate
	initializeRecombinationRate(recomb);

	//set working directory
	//setwd("/scratch/gbisshop/slim_output");
	//setwd("/exports/csce/eddie/biology/groups/lohselab/sims/output/FGM/basic_n10/loc"+folder);
	//setwd("/exports/csce/eddie/biology/groups/lohselab/sims/output/FGM/globcompl/loc"+folder);
	//setwd("/exports/csce/eddie/biology/groups/lohselab/sims/output/FGM/denovo/loc"+folder);

	// QTL-related constants used below
	defineConstant("QTL_mean", float(10));
	defineConstant("QTL_cov", 0.0); //no mutational correlations
	QTL_matrix = matrix(float(100), nrow=10);
	for (i in seqLen(10)) QTL_matrix[i][i]=sigma_m;
	defineConstant("QTL_sigma", QTL_matrix);

}

1 {
	writeFile("DB_glob"+iter+".txt", paste(POS, sep=", "), append=F);
	writeFile("DB_glob"+iter+".txt",'generation, loc_divergence, mean_loc_div, glob_p1, glob_p2', append=T);
	//size in each deme 1000
	sim.addSubpop("p1", 1000);
	sim.addSubpop("p2", 1000);
	p1.setMigrationRates(p2, migration);
	p2.setMigrationRates(p1, migration);
	gens = seq(1,generations+1, by=500);
	for (gen in gens)
		sim.registerLateEvent(NULL, s1.source, gen, gen);
		sim.deregisterScriptBlock(s1);
	
}
s1 1 late() {
	//phenotype0 is the phenotype under global selection
	//phenotype 1 is the phenotype under local selection
	p1_1 = mean(p1.individuals.getValue('phenotype0'));
	p2_1 = mean(p2.individuals.getValue('phenotype0'));

	loc_div = p1_1 - p2_1;

	//local divergence
	p1av = float(n_loci);
	p2av = float(n_loci);
	p1muts = p1.individuals.genomes.mutationsOfType(m1);
	p2muts = p2.individuals.genomes.mutationsOfType(m1);
	
	for (pos in seqLen(n_loci)){
		//determine leading allele (based on frequency) and its effect size
		//determine average effect size, weighted by frequency
		//for p1
		//mutations at position pos - convert from 1 to 100
		
		p1pos = p1muts[p1muts.position==POS[pos]];
		p1coeff = p1pos.getValue('e0');
		p1av[pos] = sum(p1coeff)/p1.individualCount;
		p2pos = p2muts[p2muts.position==POS[pos]];
		p2coeff = p2pos.getValue('e0');
		p2av[pos] = sum(p2coeff)/p2.individualCount;	
				}
					
	loc_av_result = p1av-p2av;
	writeFile("DB_loc"+iter+".txt", sim.generation +", "+paste(loc_av_result, sep=", "), append=T);

	//determine glo_div
	p1_glob = c(mean(p1.individuals.getValue('phenotype1')),mean(p1.individuals.getValue('phenotype2')),mean(p1.individuals.getValue('phenotype3')),mean(p1.individuals.getValue('phenotype4')),mean(p1.individuals.getValue('phenotype5')),mean(p1.individuals.getValue('phenotype6')),mean(p1.individuals.getValue('phenotype7')),mean(p1.individuals.getValue('phenotype8')),mean(p1.individuals.getValue('phenotype9')));
	p1_glob = sqrt(sum((p1_glob - glob_opt)^2));

	p2_glob = c(mean(p2.individuals.getValue('phenotype1')),mean(p2.individuals.getValue('phenotype2')),mean(p2.individuals.getValue('phenotype3')),mean(p2.individuals.getValue('phenotype4')),mean(p2.individuals.getValue('phenotype5')),mean(p2.individuals.getValue('phenotype6')),mean(p2.individuals.getValue('phenotype7')),mean(p2.individuals.getValue('phenotype8')),mean(p2.individuals.getValue('phenotype9')));
	p2_glob = sqrt(sum((p2_glob - glob_opt)^2));

	//write away mean fitness
	writeFile("DB_glob"+iter+".txt", sim.generation +", "+loc_div+", "+sum(loc_av_result)+", "+p1_glob+", "+p2_glob, append=T);

	}

late() {
	sim.setValue('epsilon', abs(rnorm(2,mean=0.0, sd=0.01)));

	// add effect sizes into new mutation objects
	all_m1 = sim.mutationsOfType(m1);
	new_m1 = all_m1[all_m1.originGeneration == sim.generation];
	
	if (size(new_m1))
	{
		// draw mutational effects for all new mutations at once
		effects = rmvnorm(size(new_m1), QTL_mean, QTL_sigma);
		
		// remember all drawn effects, for our final output
		old_effects = sim.getValue("all_effects");
		sim.setValue("all_effects", rbind(old_effects, effects));
		
		for (i in seqAlong(new_m1))
		{
			e = effects[i,];	// each draw is one row in effects
			mut = new_m1[i];
			mut.setValue("e0", e[0]);
			mut.setValue("e1", e[1]);
			mut.setValue("e2", e[2]);
			mut.setValue("e3", e[3]);
			mut.setValue("e4", e[4]);
			mut.setValue("e5", e[5]);
			mut.setValue("e6", e[6]);
			mut.setValue("e7", e[7]);
			mut.setValue("e8", e[8]);
			mut.setValue("e9", e[9]);
		}
	}
}

late() {
	// construct phenotypes from additive effects of QTL mutations
	inds = sim.subpopulations.individuals;
	
	for (ind in inds)
	{
		muts = ind.genomes.mutationsOfType(m1);
		
		// we have to special-case when muts is empty
		//phenotype0 is phenotype under global selection
		//phenotype1 is the phenotype under local selection
		if (size(muts)) {
			ind.setValue("phenotype0", sum(muts.getValue("e0")));
			ind.setValue("phenotype1", sum(muts.getValue("e1")));
			ind.setValue("phenotype2", sum(muts.getValue("e2")));
			ind.setValue("phenotype3", sum(muts.getValue("e3")));
			ind.setValue("phenotype4", sum(muts.getValue("e4")));
			ind.setValue("phenotype5", sum(muts.getValue("e5")));
			ind.setValue("phenotype6", sum(muts.getValue("e6")));
			ind.setValue("phenotype7", sum(muts.getValue("e7")));
			ind.setValue("phenotype8", sum(muts.getValue("e8")));
			ind.setValue("phenotype9", sum(muts.getValue("e9")));
		} else {
			ind.setValue("phenotype0", 0.0);
			ind.setValue("phenotype1", 0.0);
			ind.setValue("phenotype2", 0.0);
			ind.setValue("phenotype3", 0.0);
			ind.setValue("phenotype4", 0.0);
			ind.setValue("phenotype5", 0.0);
			ind.setValue("phenotype6", 0.0);
			ind.setValue("phenotype7", 0.0);
			ind.setValue("phenotype8", 0.0);
			ind.setValue("phenotype9", 0.0);
		}
	}
}


//make QTLs intrinsically neutral
fitness(m1){
	return 1.0;
		}
fitness(m2){
	return 1.0;
		}

//calculate fitness based on sum of effect size of all loci
//first 10000 generations to generate SGV
//optimum is 0.0 for both demes

1:10000 fitness(NULL, p1){
	pheno = c(individual.getValue('phenotype1'), individual.getValue('phenotype2'),individual.getValue('phenotype3'),individual.getValue('phenotype4'),individual.getValue('phenotype5'),individual.getValue('phenotype6'),individual.getValue('phenotype7'),individual.getValue('phenotype8'),individual.getValue('phenotype9'));
	d = sqrt(sum((pheno-glob_opt)^2));
	
	return 1 + exp(-(d^2)/(2*sigma^2));

	}
//identical selection regime for p2
1:10000 fitness(NULL, p2){
	pheno = c(individual.getValue('phenotype1'), individual.getValue('phenotype2'),individual.getValue('phenotype3'),individual.getValue('phenotype4'),individual.getValue('phenotype5'),individual.getValue('phenotype6'),individual.getValue('phenotype7'),individual.getValue('phenotype8'),individual.getValue('phenotype9'));
	d = sqrt(sum((pheno-glob_opt)^2));
	
	return 1 + exp(-(d^2)/(2*sigma^2));

	}


//calculate fitness based on sum of effect size of all loci
//selection to different optima (2.0 and -2.0)

10001:210001 fitness(NULL, p1){
	pheno = c(individual.getValue('phenotype0'), individual.getValue('phenotype1'), individual.getValue('phenotype2'),individual.getValue('phenotype3'),individual.getValue('phenotype4'),individual.getValue('phenotype5'),individual.getValue('phenotype6'),individual.getValue('phenotype7'),individual.getValue('phenotype8'),individual.getValue('phenotype9'));
	opt = c(2, glob_opt);
	d = sqrt(sum((pheno-opt)^2));
	
	return 1 + exp(-(d^2)/(2*sigma^2));

		}
10001:210001 fitness(NULL, p2){
	pheno = c(individual.getValue('phenotype0'), individual.getValue('phenotype1'), individual.getValue('phenotype2'),individual.getValue('phenotype3'),individual.getValue('phenotype4'),individual.getValue('phenotype5'),individual.getValue('phenotype6'),individual.getValue('phenotype7'),individual.getValue('phenotype8'),individual.getValue('phenotype9'));
	opt = c(-2, glob_opt);
	d = sqrt(sum((pheno-opt)^2));
	
	return 1 + exp(-(d^2)/(2*sigma^2));
		}
	
210001 late() {sim.simulationFinished(); }
