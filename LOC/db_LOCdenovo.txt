//latest version -- all loci are one bp
// w = omega = strength selection pressure , 2.5 strong, 4 weak
// sm = sigma normal distribution effect sizes 0.05
// popsize 1000 per deme
// number of loci 100
// migrationrate 0.1

initialize() {
	defineConstant("optimum1", 2);
	defineConstant("optimum2", -2);
	//standard deviation normal distribution
	//defineConstant("sigma", 4.0);
	//defineConstant("sigma_m", 0.05);
	defineConstant("simID", getSeed());
	defineConstant("generations", 200000);
	//defineConstant("n_loci", 100);
	//defineConstant("migration", 0.001);
	//defineConstant("mutation_rate", 1e-4);
	defineConstant('burnin', 0);
	
	positions = asInteger(seqLen(100)*seq_len/n_loci+seq_len/n_loci);
	defineConstant("POS", positions);
	//adapt so enough neutral sequence at ends
	ends = c(positions[n_loci-1], asInteger(seq_len+seq_len/n_loci));
	rates = c(mutation_rate, 0);
	
	//mutation rate defined for all n_loci sites, add neutral section after last mutation site 
	initializeMutationRate(rates, ends);

	// m1 mutation
	initializeMutationType("m1", 0.5, "n", 0.0, sigma_m);  //QTL
	//make sure slim includes fixed mutations to calculate fitness
	m1.convertToSubstitution = F;
	//multiple mutations on one locus, stack effect sizes s, only remember last l
	m1.mutationStackPolicy = "s";
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	//continuum of genes, 100 loci
	for (element in positions)
		initializeGenomicElement(g1, element, element);
	initializeRecombinationRate(recomb);
	//set working directory
	//setwd("/scratch/gbisshop/slim_output");
	//setwd("/Users/s1854903/sims/output/test");
	setwd("/exports/csce/eddie/biology/groups/lohselab/sims/output/LOC/denovo/loc"+folder);
	
}

1 {
	writeFile("DB_glob"+iter+".txt", paste(POS, sep=", "), append=F);
	writeFile("DB_glob"+iter+".txt", "n_loci, selection_sd, mut_sd, migration, mutation_rate, burnin, simID", append=T);
	writeFile("DB_glob"+iter+".txt", paste(c(n_loci, sigma, sigma_m, migration, mutation_rate, burnin, simID), sep=", "), append=T);
	writeFile("DB_glob"+iter+".txt", "time, mean_div, sum_loc_divergence, ", append=T);
	//size in each deme 1000
	sim.addSubpop("p1", 1000);
	sim.addSubpop("p2", 1000);
	p1.setMigrationRates(p2, migration);
	p2.setMigrationRates(p1, migration);
	gens = seq(1,generations+1, by=500);
	for (gen in gens)
		sim.registerLateEvent(NULL, s1.source, gen, gen);
	sim.deregisterScriptBlock(s1);
}

s1 1 late() {
	
	p1av = float(n_loci);
	p2av = float(n_loci);
	p1muts = p1.individuals.genomes.mutationsOfType(m1);
	p2muts = p2.individuals.genomes.mutationsOfType(m1);
	
	for (pos in seqLen(n_loci)){
	
		//determine average effect size, weighted by frequency
		//for p1
		//mutations at position pos - convert from 1 to 100
		
		p1pos = p1muts[p1muts.position==POS[pos]];
		p1coeff = p1pos.selectionCoeff;
		p1av[pos] = sum(p1pos.selectionCoeff)/p1.individualCount;
		p2pos = p2muts[p2muts.position==POS[pos]];
		p2coeff = p2pos.selectionCoeff;
		p2av[pos] = sum(p2pos.selectionCoeff)/p2.individualCount;	
				}
					
	loc_av_result = p1av-p2av;
	av_result = sum(loc_av_result);
	div = mean(p1.individuals.tagF) - mean(p2.individuals.tagF);

	writeFile("DB_glob"+iter+".txt", sim.generation +", "+div+", "+av_result, append=T);
	writeFile("DB_loc"+iter+".txt", sim.generation +", "+paste(loc_av_result, sep=", "), append=T);

	if (all(p1.individuals.countOfMutationsOfType(m1)>0)){
		mut_or = mean(sapply(p1.individuals, 'if (applyValue.countOfMutationsOfType(m1)!=0) length(applyValue.uniqueMutationsOfType(m1)[applyValue.uniqueMutationsOfType(m1).subpopID==1])/length(applyValue.uniqueMutationsOfType(m1));'));
	
		writeFile('mutratio_owndeme'+iter+'.txt', sim.generation+', '+mut_or, append=T);
		//writeFile('mutratio_owndeme'+iter+'.txt', sim.generation+', '+paste(mut_or, sep=', '), append=T);
		}
	}


1: late(){
	inds = sim.subpopulations.individuals;
	inds.tagF = inds.sumOfMutationsOfType(m1);
		}

//make QTLs intrinsically neutral
fitness(m1){
	return 1.0;
		}

//calculate fitness based on sum of effect size of all loci
//selection to different optima (2.0 and -2.0)

1:200001 fitness(NULL, p1){
	return 1 + exp(-((individual.tagF - optimum1)^2)/(2*sigma^2));
		}
1:200001 fitness(NULL, p2){
	return 1 + exp(-((individual.tagF - optimum2)^2)/(2*sigma^2));
		}
	
100001 late() {sim.simulationFinished(); }
